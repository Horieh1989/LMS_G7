@page "/moduleupdate/{moduleId:int}"
@inject IModuleDataService ModuleDataService
@inject NavigationManager Navigation

<h3>Update Module</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        @ErrorMessage
    </div>
}

<section class="module-edit">
    <EditForm Model="@UpdatedModule" OnValidSubmit="@HandleValidSubmit">
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">Name</th>
                    <th scope="col">Start Date</th>
                    <th scope="col">End Date</th>
                    <th scope="col">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td scope="row">
                        <InputText id="Name" @bind-Value="UpdatedModule.Name" class="form-control col-md-8"></InputText>
                    </td>
                    <td scope="row">
                        <InputDate id="StartDate" @bind-Value="UpdatedModule.StartDate" class="form-control col-md-8"></InputDate>
                    </td>
                    <td scope="row">
                        <InputDate id="EndDate" @bind-Value="UpdatedModule.EndDate" class="form-control col-md-8"></InputDate>
                    </td>
                    <td scope="row">
                        <InputText id="Description" @bind-Value="UpdatedModule.Description" class="form-control col-md-8"></InputText>
                    </td>
                </tr>
            </tbody>
        </table>

        <a href="@($"moduleview/{UpdatedModule.Id}")" class="btn btn-outline-primary">Back to Module Details</a>&nbsp;
        <button type="submit" class="btn btn-primary me-1">Update Module</button>
    </EditForm>
</section>

@code {
    [Parameter]
    public int ModuleId { get; set; }

    Module UpdatedModule { get; set; } = new Module();
    string ErrorMessage { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        UpdatedModule = await ModuleDataService.GetModule(ModuleId);
    }

    protected async Task HandleValidSubmit()
    {
        try
        {
            await ModuleDataService.UpdateModule(UpdatedModule);
            Navigation.NavigateTo($"/moduleview/{UpdatedModule.Id}");
        }
        catch (Exception e)
        {
            ErrorMessage = e.Message;
        }
    }
}
